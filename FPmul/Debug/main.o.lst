   1              	# 1 "../main.S"
   1              	/*
   0              	
   0              	
   0              	
   2              	 * main.S
   3              	 *
   4              	 *  Created on: 29/03/2020
   5              	 *      Author: tmoro
   6              	 */
   7              	
   8              	.global start
   9              	
  10              	.data
  11              	/*
  12              	Checked examples:
  13              	
  14              	1)
  15              		A = 1 10000011 00100000000000000000000
  16              		B = 0 10000010 00110000000000000000000
  17              		A*B=1 10000110 01010110000000000000000
  18              	
  19              	2)
  20              		C = 0 10000110 00001100001000000000000
  21              		D = 1 10000000 00100000000000000000000
  22              		C*D=1 10000111 00101101101001000000000
  23              	
  24              	3)
  25              		E = 1 10000010 11010000000000000000000
  26              		F = 1 01111101 10000000000000000000000
  27              		E*F=0 10000001 01011100000000000000000
  28              	
  29              	*/
  30              		.equ X,     0b11000001011010000000000000000000 //first operand
  31              		.equ Y,     0b10111110110000000000000000000000 //second operand
  32              		.equ mmask, 0b00000000011111111111111111111111 //mantissa mask
  33              		.equ emask, 0b01111111100000000000000000000000 //exponent mask
  34              		.equ smask, 0b10000000000000000000000000000000 //sign mask
  35              		.equ normalizer, 0b000000000100000000000000000000000 //mask of 23th normalizer bit
  36              		.equ ninebits, 0b11111111100000000000000000000000 //mask of 9 most significant bits
  37              		.equ fourteenbits, 0b00000000000000000011111111111111 //mask of 14 least significant bits
  38              		.equ specificbit,  0b00000000000000001000000000000000 //48th bit is important for if block
  39              		.equ eightbits, 0b11111111000000000000000000000000 //mask of 8 most significant bits
  40              		.equ fifteenbits, 0b00000000000000000111111111111111 //mask of 15 least significant bits
  41              		.equ onetwoseven, 0b10000001 //-127 to subtract from exponent sum
  42              		.equ exponentcleaner, 0b00000000000000000000000011111111 //cleaner for overflow in sum of exponent
  43              	
  44              	.bss
  45              	
  46 0000 00000000 		result: .space 4
  47              	
  48              	.text
  49              	
  50              	start:
  51              	
  52 0000 E4009FE5 		ldr r0, =X //first operand in r0
  53 0004 E4109FE5 		ldr r1, =Y //second operand in r0
  54 0008 E4209FE5 		ldr r2, =mmask
  55 000c 023000E0 		and r3, r0, r2
  56 0010 024001E0 		and r4, r1, r2 //mantissas in r3, r4
  57 0014 0225A0E3 		ldr r2, =normalizer
  58 0018 023083E1 		orr r3, r3, r2
  59 001c 024084E1 		orr r4, r4, r2 //normalize mantissas
  60 0020 935486E0 		umull r5, r6, r3, r4
  61 0024 0229A0E3 		ldr r2, =specificbit
  62 0028 02A006E0 		and r10, r6, r2
  63 002c 00005AE3 		cmp r10, #0
  64 0030 070000CA 		bgt do_15_8
  65 0034 BC209FE5 		ldr r2, =ninebits  //take 9 most significant bits of umulled 1st reg
  66 0038 055002E0 		and r5, r2, r5
  67 003c B8209FE5 		ldr r2, =fourteenbits //take 14 least significant bits of umulled 2nd reg
  68 0040 066002E0 		and r6, r2, r6
  69 0044 A55BA0E1 		lsr r5, r5, #23 //put 9 bits on the right
  70 0048 8664A0E1 		lsl r6, r6, #9 //put 14 bits on the left
  71 004c 0090A0E3 		mov r9, #0 //did 14-9
  72 0050 060000EA 		b assemble_mantissa
  73              	do_15_8:
  74 0054 FF24A0E3 		ldr r2, =eightbits  //take 8 most significant bits of umulled 1st reg
  75 0058 055002E0 		and r5, r2, r5
  76 005c 9C209FE5 		ldr r2, =fifteenbits //take 15 least significant bits of umulled 2nd reg
  77 0060 066002E0 		and r6, r2, r6
  78 0064 255CA0E1 		lsr r5, r5, #24 //put 8 bits on the right
  79 0068 0664A0E1 		lsl r6, r6, #8 //put 15 bits on the left
  80 006c 0190A0E3 		mov r9, #1 //did 15-8
  81              	assemble_mantissa:
  82 0070 056086E1 		orr r6, r6, r5 //fully multiplied mantissa in r6
  83 0074 0221A0E3 		ldr r2, =smask
  84 0078 023000E0 		and r3, r0, r2
  85 007c 024001E0 		and r4, r1, r2
  86 0080 0150A0E3 		mov r5, #1  //sign in r5 "if" not_equal skips #0
  87 0084 040053E1 		cmp r3, r4	//decide sign
  88 0088 0000001A 		bne not_equal
  89 008c 0050A0E3 		mov r5, #0	//sign in r5 accessed if signs they are equal
  90              	not_equal:
  91 0090 855FA0E1 		lsl r5, #31 //shift to sign position
  92 0094 68209FE5 		ldr r2, =emask
  93 0098 000002E0 		and r0, r2, r0
  94 009c 011002E0 		and r1, r2, r1	//exponents in r0, r1
  95 00a0 A00BA0E1 		lsr r0, r0, #23
  96 00a4 A11BA0E1 		lsr r1, r1, #23 //shift right for sum
  97 00a8 000081E0 		add r0, r1, r0  //unbiased sum in r0
  98 00ac FF20A0E3 		ldr r2, =exponentcleaner
  99 00b0 000002E0 		and r0, r2, r0  //clean result
 100 00b4 8120A0E3 		ldr r2, =onetwoseven
 101 00b8 020080E0 		add r0, r0, r2 //unbiased sum -127
 102 00bc FF20A0E3 		ldr r2, =exponentcleaner
 103 00c0 000002E0 		and r0, r2, r0  //clean result again
 104 00c4 010059E3 		cmp r9,#1
 105 00c8 0000003A 		blo did_14_8
 106 00cc 010080E2 		add r0, r0, #1 //compensate for doing 15-8
 107              	did_14_8:
 108 00d0 800BA0E1 		lsl r0, #23 //shift to exponent position
 109 00d4 05A080E1 		orr r10, r0, r5
 110 00d8 06A08AE1 		orr r10, r10, r6 //result is in r10 in this step
 111 00dc 24009FE5 		ldr r0, =result
 112 00e0 00A080E5 		str r10, [r0] //result stored in result space
 113 00e4 FFFFFFEA 		b end;
 114              	
 115 00e8 FEFFFFEA 	end: b end;
 115      000068C1 
 115      0000C0BE 
 115      FFFF7F00 
 115      000080FF 
DEFINED SYMBOLS
           ../main.S:50     .text:00000000 start
           ../main.S:30     *ABS*:c1680000 X
           ../main.S:31     *ABS*:bec00000 Y
           ../main.S:32     *ABS*:007fffff mmask
           ../main.S:33     *ABS*:7f800000 emask
           ../main.S:34     *ABS*:80000000 smask
           ../main.S:35     *ABS*:00800000 normalizer
           ../main.S:36     *ABS*:ff800000 ninebits
           ../main.S:37     *ABS*:00003fff fourteenbits
           ../main.S:38     *ABS*:00008000 specificbit
           ../main.S:39     *ABS*:ff000000 eightbits
           ../main.S:40     *ABS*:00007fff fifteenbits
           ../main.S:41     *ABS*:00000081 onetwoseven
           ../main.S:42     *ABS*:000000ff exponentcleaner
           ../main.S:46     .bss:00000000 result
           ../main.S:46     .bss:00000000 $d
           ../main.S:52     .text:00000000 $a
           ../main.S:73     .text:00000054 do_15_8
           ../main.S:81     .text:00000070 assemble_mantissa
           ../main.S:90     .text:00000090 not_equal
           ../main.S:107    .text:000000d0 did_14_8
           ../main.S:115    .text:000000e8 end
           ../main.S:115    .text:000000ec $d
                   .debug_aranges:0000000c $d

NO UNDEFINED SYMBOLS
